angular.module('app').config(configRoute);

/* ngInject */
function configRoute($stateProvider, $locationProvider, $urlRouterProvider) {
    $locationProvider.html5Mode(false);

    $urlRouterProvider
        .when('/', '/daily')
        .otherwise('/daily');

    $stateProvider
        .state('main', {
            url: '/',
            templateUrl: 'main.html',
            controller: 'MainCtrl',
            controllerAs: 'main',
        })
        //主页面地图
        .state('main.map', {
            url: '^/map',
            templateUrl: 'map.html',
            controller: 'MapCtrl',
            controllerAs: 'mmc',
        })
        //世界名画浮标
        .state('main.point', {
            url: '^/point/:area/:tit',
            templateUrl: 'Europe.html',
            controller: 'MainDrawCtrl',
            controllerAs: 'fdc',       
        })
        //每日推荐
        .state('main.daily', {
            url: '^/daily',
            templateUrl: 'daily.html',
            controller: 'DailyCtrl',
            controllerAs: 'dc'
        })
        //周边活动
        .state('main.near_activity', {
            url: '^/near_activity',
            templateUrl: 'near_activity.html',
            controller: 'NearCtrl',
            controllerAs: 'nc',
        })  
        //周边活动详情页
        .state('main.near_detail', {
            url: '^/near_detail/:pit_name',
            templateUrl: 'near_detail.html',
            controller: 'NearDetailCtrl',
            controllerAs: 'ndc',
        })   
        //名画详情页      
        .state('main.pit_detail', {
            url: '^/pit_detail/:pit_name/:pit_img',
            templateUrl: 'pit_detail.html',
            controller: 'PitDetailCtrl',
            controllerAs: 'pdc'
        })
        //游戏主页
        .state('main.game', {
            url: '^/game',
            templateUrl: 'game.html'
        })
        .state('main.game.common', {
            url: '^/game/common',
            templateUrl: 'common.html'
        })        
        //拼图游戏
        .state('main.game.common.puzzle', {
            url: '^/game/common/puzzle',
            templateUrl: 'puzzle.html',
            controller: 'PuzzleCtrl',
            controllerAs: 'puc',
        })
        //问答游戏
        .state('main.game.common.question', {
            url: '^/game/common/question',
            templateUrl: 'question_ans.html',
            controller: 'QuestionCtrl',
            controllerAs: 'qc',
        })
        //找茬游戏
        .state('main.game.common.zhaoca', {
            url: '^/game/common/zhaoca',
            templateUrl: 'zhaoca.html',
            controller: 'GameCtrl',
            controllerAs: 'gc',
        })
        //绘图主页面
        .state('main.paint', {
            url: '^/paint',
            templateUrl: 'paint.html'
        })
        //绘图板页面
        .state('main.create', {
            url: '^/create',
            templateUrl: 'create.html',
            controller: 'PaintBoardCtrl',
            controllerAs: 'pbc',
        })
        //临摹页面
        .state('main.linmo', {
            url: '^/linmo',
            templateUrl: 'linmo.html',
            controller: 'LinmoCtrl',
            controllerAs: 'lc',
        })
        //填色页面
        .state('main.addcolor', {
            url: '^/addcolor',
            templateUrl: 'addcolor.html',
            controller: 'addColorCtrl',
            controllerAs: 'ac'
        })
        //我的页面
        .state('main.my', {
            url: '^/my',
            templateUrl: 'my.html',
            controller: 'Myctrl',
            controllerAs: 'mc',
        })
        //我的收藏
        .state('main.mycollect', {
            url: '^/mycollect',
            templateUrl: 'mycollect.html',
            controller: 'MyCollectCtrl',
            controllerAs: 'mcc',
        })
        //我的绘画作品
        .state('main.mydraw', {
            url: '^/mydraw',
            templateUrl: 'mydraw.html',
            controller: 'MyDrawCtrl',
            controllerAs: 'mdc',
        })
        //学过的画
        .state('main.mypit', {
            url: '^/mypit',
            templateUrl: 'mypitrue.html',
            controller: 'MyPitCtrl',
            controllerAs: 'mpc',
        })
}
(function() {
    angular.module('app').controller('addColorCtrl', addColorCtrl);

    // 全局控制器 
    /* ngInject */
    function addColorCtrl($rootScope, $scope, $state, $window,$timeout, ngDialog, $window, $http) {
        var ctrl = {
            colorChoose: colorChoose,
            color: '#000',
            linewidth: 40,
            musicShow: true,
            mShow: mShow,
            type: 'pen',
            usePen: usePen,
            useEarser: useEarser,
            imgSave: imgSave,
            addColor:addColor,
            colorbox: ['#8827ff', '#027efa', '#ffdb11', '#66cc33', '#9e5e30', '#ff7238', '#d52113'],
            colorselect: '#ff7238'
        };
        (function() {
                   
            colorPick();
            var myDate = new Date();
            var mytime = myDate.format("yyyy-MM-dd");
            ctrl.date = mytime;              
            var svg=document.getElementById('svg_img');
            var initsvgbg=svg.getElementsByTagName('path');
            for(var i=0;i<initsvgbg.length;i++){
                initsvgbg[i].setAttribute('style','fill:#fff;stroke:#000;stroke-width: 0.002rem;');
            }            
            // var bgmusic = document.getElementById('mp3Btn');
            // bgmusic.volume = 0.2;
            // bgmusic.play();            
        })();
        return ctrl;
                 
        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }

        function openDialog(tip) {
            $rootScope.tip = "";
            $rootScope.tip = tip;
            ngDialog.open({
                template: '<div class="modal-body">{{tip}}</div>',
                plain: true,
                className: 'ngdialog-theme-default ngdialog-theme-tip',
                scope: $scope
            });
        }  
        //为空白路径填充颜色，str为空白路径的id名，通过id名识别指定路径
        function addColor(str){
            var str=document.getElementById(str);
            if(ctrl.type=="pen"){
                str.style.fill=ctrl.colorselect;
            }else if(ctrl.type=="earser"){
                str.style.fill="#fff";
            }
        }        
        //点击保存填色图片      
        function imgSave() {
            //判断登录状态，未登录提示先登录，跳转登录界面。
            if($window.sessionStorage.user==undefined){
                openDialog('请先登录！');
                $timeout(function() {
                    ngDialog.closeAll();
                    $state.go('main.my');
                }, 1000);              
            }else{
                //获取填色svg图片，并转化为base64数据
                var s = new XMLSerializer().serializeToString(document.getElementById("svg_img"));
                var encodedData = window.btoa(s);
                var imgData='data:image/svg+xml;base64,' + encodedData;
                //获取当前时间
                var id=new Date().getTime();
                //打开绘画作品数据库mypaint
                var db;
                db = openDatabase('mypaint', '1.0', 'test db', 10*1024 * 1024);
                //执行数据库插入操作事务
                db.transaction(function(tx) {
                    tx.executeSql('CREATE TABLE IF NOT EXISTS mypaint \
                        (id unique,name,painting_img,date)');
                    tx.executeSql('insert into mypaint (id,name,painting_img,date) VALUES (?,?,?, ?)',
                     [id,$window.sessionStorage.user,imgData,ctrl.date], function(tx,results) {
                        console.log(results);
                        document.getElementById('img-save').style.background='#78dfff';
                    });                
                });  
            }      
        }
        //(x,y)滑块坐标，canvas为界面上拾色器，根据坐标获取像素点的颜色
        function getPixelColor(canvas, x, y) {
            var thisContext = canvas.getContext("2d");
            var imageData = thisContext.getImageData(x, y, 1, 1);
            // 获取该点像素数据
            var pixel = imageData.data;
            var r = pixel[0];
            var g = pixel[1];
            var b = pixel[2];
            var a = 1;
            var rHex = r.toString(16);
            r < 16 && (rHex = "0" + rHex);
            var gHex = g.toString(16);
            g < 16 && (gHex = "0" + gHex);
            var bHex = b.toString(16);
            b < 16 && (bHex = "0" + bHex);
            var rgbaColor = "rgba(" + r + "," + g + "," + b + "," + a + ")";
            var rgbColor = "rgb(" + r + "," + g + "," + b + ")";
            var hexColor = "#" + rHex + gHex + bHex;
            return {
                rgba: rgbaColor,
                rgb: rgbColor,
                hex: hexColor,
                r: r,
                g: g,
                b: b,
                a: a
            };
        }

        function colorPick() {
            var colorpick = document.getElementById('color-gra');//获取拾色器DOM节点id
            var colorhandle = document.getElementById('color-handle');//获取滑块DOM节点id
            var ctx = colorpick.getContext("2d");
            //canvas设置拾色器渐变背景
            var my_gradient = ctx.createLinearGradient(0, 0, 0, 360);
            //渐变设置白->自定义颜色->黑
            my_gradient.addColorStop(0, 'white');
            my_gradient.addColorStop(0.5, ctrl.colorselect);
            my_gradient.addColorStop(1, "black");
            //canvas填充渐变颜色
            ctx.fillStyle = my_gradient;
            ctx.fillRect(0, 0, colorpick.width, colorpick.height);

            var ifBool = false;//是否拖动拾色器滑块
            var start = function(e) {
                e.stopPropagation();//阻止时间冒泡
                ifBool = true;
            }
            var move = function(e) {
                var x, y;
                if (ifBool) {
                    x = e.touches[0].clientX;
                    y = e.touches[0].clientY;
                    //拾色器背景top定位
                    var lineDiv_top = getPosition(colorpick).top;
                    //滑块top定位
                    var minDiv_top = y - lineDiv_top;
                    //判断滑块是否超出拾色器范围
                    if (minDiv_top < 0) {
                        minDiv_top = 0;
                    }
                    if (minDiv_top > 340) {
                        minDiv_top = 340;
                    }
                    //改变滑块top定位
                    colorhandle.style.top = minDiv_top + "px";
                    //调用getPixelColor(),传递滑块当前定位，获取像素颜色并赋给画笔
                    var colorData = getPixelColor(colorpick, 5, minDiv_top);
                    ctrl.colorselect = colorData.rgba;
                    document.getElementById('pen-head').style.fill=ctrl.colorselect;
                }
            }
            var end = function(e) {
                ifBool = false;
            }
            //添加时间响应
            colorhandle.addEventListener("touchstart", start);
            colorhandle.addEventListener("touchmove", move);
            colorhandle.addEventListener("touchend", end);

            //获取定位
            var getPosition = function(node) {
                var top = node.offsetTop;
                var current = node.offsetParent;　　
                while (current != null) {　　　
                    top += current.offsetTop;　　
                    current = current.offsetParent;　　
                }
                return {
                    "top": top
                };
            }
        }
        //工具栏颜色选择
        function colorChoose(index) {
            var ol = document.getElementById('colorselect');
            var list = ol.getElementsByTagName('li');
            for (var i = 0; i < 7; i++) {
                list[i].style.border = "none";
            }
            list[index].style.border = "7px solid #fff";
            ctrl.colorselect = list[index].style.background;
            colorPick();
            document.getElementById('pen-head').style.fill=ctrl.colorselect;
        }

        function usePen() {
            document.getElementById('pen-h').style.bottom= 3.28+'rem';;
            document.getElementById('pen').style.top=0+'rem';
            document.getElementById('earser').style.top=0.888889+'rem';
            ctrl.type = 'pen';
        }

        function useEarser() {
            document.getElementById('pen-h').style.bottom=2.78+'rem';
            document.getElementById('pen').style.top=0.5+'rem';
            document.getElementById('earser').style.top=0.2+'rem';
            ctrl.type = 'earser';
        }
    }


})();
(function() {
    angular.module('app').controller('DailyCtrl', DailyCtrl);

    // 全局控制器 
    /* ngInject */
    function DailyCtrl($rootScope, $window, $scope, $http, $state) {
        var ctrl = {
            imgData: null,
            dailyArr: [{
                id:1,
                painting_name:"星夜",
                painting_url:"./imgs/dailypit/xingye.jpg",
                pit_img:"./imgs/dailypit/eur1.jpg"
            },{
                id:2,
                painting_name:"星夜",
                painting_url:"./imgs/dailypit/xingye.jpg",     
                pit_img:"./imgs/dailypit/eur1.jpg"           
            }],
            dailypit:{},
            dailydb: null,
            date: null,
            musicShow: true,
            mShow: mShow
        };
        (function() {
            initPit();                
        })();

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }

        function initPit() {
            var myDate = new Date();
            var day = myDate.getDate();
            var id = 1;
            if (day % 2 == 0) {
                ctrl.dailypit=ctrl.dailyArr[0];
            } else { 
                ctrl.dailypit=ctrl.dailyArr[1];
            }
        }
        return ctrl;

    }
})();
(function() {
    angular.module('app').controller('GameCtrl', GameCtrl);

    // 全局控制器 
    /* ngInject */
    function GameCtrl($rootScope, $scope, $state, $http, $timeout, ngDialog) {
        var ctrl = {
            imgObj: null,
            musicShow: true,
            mShow: mShow,
            zhaochaBg: zhaochaBg,
            zc_id: 0,
            zc_pit: [],
            pointA: { icheck: false },
            pointB: { icheck: false },
            pointC: { icheck: false },
            pointD: { icheck: false },
            pointE: { icheck: false }
        };
        (function() {
            zhaochaBg();
            $rootScope.tipShow = true;
            
            var audio = document.createElement("audio");
            audio.src = './audio/zc.mp3';
            document.body.appendChild(audio);
            audio.play();                                 
        })();

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }
        var lcanvas = document.getElementById('lcanvas');
        var lctx = lcanvas.getContext("2d");
        // var limg = new Image();

        var rcanvas = document.getElementById('rcanvas');
        var rctx = rcanvas.getContext("2d");
        // var rimg = new Image();

        function zhaochaBg() {
            var lcanvas = document.getElementById('lcanvas');
            var lctx = lcanvas.getContext("2d");            
            lctx.clearRect(0,0,lcanvas.width,lcanvas.height);
            var rcanvas = document.getElementById('rcanvas');
            var rctx = rcanvas.getContext("2d");            
            rctx.clearRect(0,0,rcanvas.width,rcanvas.height);

            $rootScope.tipShohw = true;
            
            if(ctrl.zc_id ==0){
                $rootScope.tipShow=true;
            }
            var imgId = ctrl.zc_id; /*parseInt(Math.random()*3+1)*/
            var imgObj = null;
            ctrl.pointA.icheck = false;
            ctrl.pointB.icheck = false;
            ctrl.pointC.icheck = false;
            ctrl.pointD.icheck = false;
            ctrl.pointE.icheck = false;

            var db = openDatabase('zcDraw', '1.0', 'test db', 1024 * 1024);
            db.transaction(function(context) {
                context.executeSql('CREATE TABLE IF NOT EXISTS zcDraw (id unique,tit,limg,rimg,first,second,third,forth,five)');
                context.executeSql('INSERT INTO zcDraw (id,tit,limg,rimg,first,second,third,forth,five) VALUES (1,"./imgs/common/xingye_tit.png","./imgs/dailypit/zc1.jpg","./imgs/dailypit/zc11.jpg","340,420,70,150,385,120","528,628,538,638,580,600","177,257,473,553,240,520","52,92,460,500,110,480" ,"720,800,950,1030,750,980")');
            });
            // db.transaction(function (tx) {
            //     tx.executeSql('drop table zcDraw');
            // });            
            db.transaction(function(context) {
                context.executeSql('select * from zcDraw',[],function(context,results){
                    for(var i=0;i<results.rows.length;i++){
                        ctrl.zc_pit[i]=results.rows.item(i);
                    }

                    ctrl.imgObj = ctrl.zc_pit[imgId];

                    console.log(imgId);
                    lcanvas.style.backgroundImage = "url(" + ctrl.imgObj.limg + ")";
                    rcanvas.style.backgroundImage = "url(" + ctrl.imgObj.rimg + ")";

                    var pointA = ctrl.imgObj.first.split(',');
                    var pointB = ctrl.imgObj.second.split(',');
                    var pointC = ctrl.imgObj.third.split(',');
                    var pointD = ctrl.imgObj.forth.split(',');
                    var pointE = ctrl.imgObj.five.split(',');


                    ctrl.pointA.lx = parseInt(pointA[0]);
                    ctrl.pointA.rx = parseInt(pointA[1]);
                    ctrl.pointA.ty = parseInt(pointA[2]);
                    ctrl.pointA.by = parseInt(pointA[3]);
                    ctrl.pointA.cx = parseInt(pointA[4]);
                    ctrl.pointA.cy = parseInt(pointA[5]);

                    ctrl.pointB.lx = parseInt(pointB[0]);
                    ctrl.pointB.rx = parseInt(pointB[1]);
                    ctrl.pointB.ty = parseInt(pointB[2]);
                    ctrl.pointB.by = parseInt(pointB[3]);
                    ctrl.pointB.cx = parseInt(pointB[4]);
                    ctrl.pointB.cy = parseInt(pointB[5]);

                    ctrl.pointC.lx = parseInt(pointC[0]);
                    ctrl.pointC.rx = parseInt(pointC[1]);
                    ctrl.pointC.ty = parseInt(pointC[2]);
                    ctrl.pointC.by = parseInt(pointC[3]);
                    ctrl.pointC.cx = parseInt(pointC[4]);
                    ctrl.pointC.cy = parseInt(pointC[5]);

                    ctrl.pointD.lx = parseInt(pointD[0]);
                    ctrl.pointD.rx = parseInt(pointD[1]);
                    ctrl.pointD.ty = parseInt(pointD[2]);
                    ctrl.pointD.by = parseInt(pointD[3]);
                    ctrl.pointD.cx = parseInt(pointD[4]);
                    ctrl.pointD.cy = parseInt(pointD[5]);

                    ctrl.pointE.lx = parseInt(pointE[0]);
                    ctrl.pointE.rx = parseInt(pointE[1]);
                    ctrl.pointE.ty = parseInt(pointE[2]);
                    ctrl.pointE.by = parseInt(pointE[3]);
                    ctrl.pointE.cx = parseInt(pointE[4]);
                    ctrl.pointE.cy = parseInt(pointE[5]);

                    checkSame(ctrl.pointA, ctrl.pointB, ctrl.pointC, ctrl.pointD, ctrl.pointE);

                });
            });     
            ngDialog.closeAll();
        }
        //绘制红色圆圈
        function drawCircle(ctx, x, y) {
            ctx.beginPath();
            ctx.strokeStyle = "red";
            ctx.lineWidth = 5;
            ctx.arc(x, y, 80, 0, Math.PI * 2, false);
            ctx.stroke();
        }
        //点击找出不同，判断选择是否正确

        function checkPoint(x, y, objA, objB, objC, objD, objE) {
            //判断手指触屏点是否位于找茬点的范围内
            if ((x > objA.lx && x < objA.rx) && (y > objA.ty && y < objA.by)) {
                //触屏点位于范围内，判断是否已选择过
                if (!objA.icheck) {
                    //选择正确同时在左右绘制红色圆圈标志
                    drawCircle(lctx, objA.cx, objA.cy);
                    drawCircle(rctx, objA.cx, objA.cy);
                    //objA标志为已选择
                    objA.icheck = true;
                }
            } else if ((x > objB.lx && x < objB.rx) && (y > objB.ty && y < objB.by)) {
                if (!objB.icheck) {
                    drawCircle(lctx, objB.cx, objB.cy);
                    drawCircle(rctx, objB.cx, objB.cy);
                    objB.icheck = true;
                }
            } else if ((x > objC.lx && x < objC.rx) && (y > objC.ty && y < objC.by)) {
                if (!objC.icheck) {
                    drawCircle(lctx, objC.cx, objC.cy);
                    drawCircle(rctx, objC.cx, objC.cy);
                    objC.icheck = true;
                }
            } else if ((x > objD.lx && x < objD.rx) && (y > objD.ty && y < objD.by)) {
                if (!objD.icheck) {
                    drawCircle(lctx, objD.cx, objD.cy);
                    drawCircle(rctx, objD.cx, objD.cy);
                    objD.icheck = true;
                }
            } else if ((x > objE.lx && x < objE.rx) && (y > objE.ty && y < objE.by)) {
                if (!objE.icheck) {
                    console.log(objE);
                    drawCircle(lctx, objE.cx, objE.cy);
                    drawCircle(rctx, objE.cx, objE.cy);
                    objE.icheck = true;
                }
            }
            //所有的找茬点都已找出,弹出弹窗提示已完成
            if (objA.icheck && objB.icheck && objC.icheck && objD.icheck && objE.icheck) {
                $timeout(function() {  
                    ngDialog.open({
                        template: 'zc_finsh.html',
                        className: 'ngdialog-theme-default ngdialog-theme-custom',
                        scope: $scope
                    });
                }, 500);
            }
        }
        /*  objA、objB、objC、objD、objE为设置的找茬点范围
            objA具有属性lx，ty，rx，by，cx，cy，icheck
            (lx,ty)：左上角坐标
            (rx,by)：右上角坐标
            (cx,cy)：找茬点的中心坐标
            icheck:false未选择，true已选择       
        */
        function checkSame(objA, objB, objC, objD, objE) {
            /* x,y手机点击坐标 */
            lcanvas.onmousedown = function(e) { //左边canvas触屏事件
                var x = e.clientX - lcanvas.getBoundingClientRect().left;
                var y = e.clientY - lcanvas.getBoundingClientRect().top;
                checkPoint(x, y, objA, objB, objC, objD, objE);
            };
            rcanvas.onmousedown = function(e) { //左边canvas触屏事件
                var x = e.clientX - rcanvas.getBoundingClientRect().left;
                var y = e.clientY - rcanvas.getBoundingClientRect().top;
                checkPoint(x, y, objA, objB, objC, objD, objE);
            };
            rcanvas.ontouchstart = function(e) { //右边canvas触屏事件
                var x = e.touches[0].clientX - rcanvas.getBoundingClientRect().left;
                var y = e.touches[0].clientY - rcanvas.getBoundingClientRect().top;
                checkPoint(x, y, objA, objB, objC, objD, objE);
            };
            lcanvas.ontouchstart = function(e) { //左边canvas触屏事件
                var x = e.touches[0].clientX - lcanvas.getBoundingClientRect().left;
                var y = e.touches[0].clientY - lcanvas.getBoundingClientRect().top;
                checkPoint(x, y, objA, objB, objC, objD, objE);
            };
            rcanvas.ontouchstart = function(e) { //右边canvas触屏事件
                var x = e.touches[0].clientX - rcanvas.getBoundingClientRect().left;
                var y = e.touches[0].clientY - rcanvas.getBoundingClientRect().top;
                checkPoint(x, y, objA, objB, objC, objD, objE);
            };
            
        }

        return ctrl;
    }
})();
(function() {
    angular.module('app').controller('LinmoCtrl', LinmoCtrl);

    // 全局控制器 
    /* ngInject */
    function LinmoCtrl($rootScope, $scope, $state, $http) {
        var ctrl = {
            musicShow: true,
            lm_pit:[{
                imgData:'./imgs/dailypit/xingye.jpg',
                imgTitle:'./imgs/dailypit/xingye_tit.png'
            },
            {
                imgData:'./imgs/dailypit/xingye1.jpg',
                imgTitle:'./imgs/dailypit/xingye_tit.png'
            }],
            lm_showpit:{},
            mShow: mShow
        };

        (function() {
            linmoBg();
            var audio = document.createElement("audio");
            audio.src = './audio/lm.mp3';
            audio.play(); 
            document.body.appendChild(audio); 
            
            // var bgmusic = document.getElementById('mp3Btn');
            // bgmusic.volume = 0.2;
            // bgmusic.play();                            
        })();

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }


        function linmoBg() {
            var imgId = 0;/*parseInt(Math.random() * 3 + 1)*/
            ctrl.lm_showpit=ctrl.lm_pit[imgId];
        }

        return ctrl;
    }
})();
(function() {
    angular.module('app').controller('MainCtrl', MainCtrl);

    // 全局控制器 
    /* ngInject */
    function MainCtrl($rootScope,$timeout, $window, $scope, $http, $state) {
        var ctrl = {
            toBack: toBack,
            tipDel: tipDel,
            backGame: backGame,
            backDraw:backDraw,
            backGame:backGame,
            backMap:backMap
        };
        (function() {  
            $rootScope.musicShow=false;  
            var audio = document.getElementById('mp3Btn');
            audio.volume=0.2;
            if($rootScope.musicShow){
                audio.play();
            }else{
                audio.pause();
            }
            $rootScope.tipShow = false;
            window.onresize = function() {
                location.replace(document.referrer);
            };      
        })();

        function backMap(){
            $state.go('main.map');
        }        

        function backDraw(){
            $state.go('main.paint');
        }
        function backGame(){
            $state.go('main.game');
        } 
        function backMy(){
            $state.go('main.my');
        }        

        function tipDel() {
            $rootScope.tipShow = false;
        }

        function toBack() {
            history.back();
        }

        return ctrl;

    }
})();
(function() {
    angular.module('app').controller('MainDrawCtrl', MainDrawCtrl);

    // 全局控制器 
    /* ngInject */
    function MainDrawCtrl($rootScope, $stateParams, BackService,$window, $scope, $http, $state) {
        var ctrl = {
            main_pit: [],
            date: null,
            slide_touch:false,
            area: $stateParams.area,
            tit: $stateParams.tit,
            icheck: [],
            preClick:preClick,
            nextClick:nextClick
        };
        (function() {
            initPit();
            // initEPit();
            var slide_btn=document.getElementById('slide_btn');
            slide_btn.ontouchstart=function(){
                ctrl.slide_touch=true;
                slide_btn.ontouched=function(){
                    ctrl.slide_touch=false;
                };  
            };        
        })();
        var i=1;
        function preClick(){
            i--;
            if(i==0){
                i=1;                             
            } 
            if(i==1){
                document.getElementById('slide_btn').style.display='none';
                document.getElementById('s_btn').style.display='block';                             
            }else if(i>1){
                document.getElementById('slide_btn').style.display='block';
                document.getElementById('s_btn').style.display='block';                               
            }           
            $('#main_pit').animate({left:-1930*(i-1)},"slow");
            BackService.init();
        }

        function nextClick(){
            if(i==4){
                i=4;
            } 
            if(i==3){
                document.getElementById('slide_btn').style.display='block';
                document.getElementById('s_btn').style.display='none';                  
            }else if(i<3){
                document.getElementById('slide_btn').style.display='block';
                document.getElementById('s_btn').style.display='block';                               
            }
            $('#main_pit').animate({left:-1930*i},"slow");
            i++;
            BackService.init();                      
        }

        function initPit() {
            var db = openDatabase('maindraw', '1.0', 'test db', 10 * 1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('CREATE TABLE IF NOT EXISTS maindraw (painting_name unique,painting_img,area)');
                tx.executeSql('INSERT INTO maindraw (painting_name,painting_img,area) VALUES ("星夜@蜻蜓@3@4@5@6","./imgs/dailypit/eur1.jpg@./imgs/dailypit/eur2.jpg@./imgs/dailypit/eur3.jpg@./imgs/dailypit/eur4.jpg@./imgs/dailypit/eur5.jpg@./imgs/dailypit/eur6.jpg","Europe")');
                tx.executeSql('INSERT INTO maindraw (painting_name,painting_img,area) VALUES ("eur7@eur8@eur9@eur10@eur11@eur12","./imgs/dailypit/eur7.jpg@./imgs/dailypit/eur8.jpg@./imgs/dailypit/eur9.jpg@./imgs/dailypit/eur10.jpg@./imgs/dailypit/eur11.jpg@./imgs/dailypit/eur12.jpg","Europe")');
                tx.executeSql('INSERT INTO maindraw (painting_name,painting_img,area) VALUES ("eur13@eur14@eur15@eur16@eur17@eur18","./imgs/dailypit/eur13.jpg@./imgs/dailypit/eur14.jpg@./imgs/dailypit/eur15.jpg@./imgs/dailypit/eur16.jpg@./imgs/dailypit/eur17.jpg@./imgs/dailypit/eur18.jpg","Europe")');
                tx.executeSql('INSERT INTO maindraw (painting_name,painting_img,area) VALUES ("eur19@eur20@eur21@eur22@eur23@eur24","./imgs/dailypit/eur19.jpg@./imgs/dailypit/eur20.jpg@./imgs/dailypit/eur21.jpg@./imgs/dailypit/eur22.jpg@./imgs/dailypit/eur23.jpg@./imgs/dailypit/eur24.jpg","Europe")');

                tx.executeSql('INSERT INTO maindraw (painting_name,painting_img,area) VALUES ("Asia1@Asia2@Asia3@Asia4@Asia5@Asia6","./imgs/dailypit/Asia1.jpg@./imgs/dailypit/Asia2.jpg@./imgs/dailypit/Asia3.jpg@./imgs/dailypit/Asia4.jpg@./imgs/dailypit/Asia5.jpg@./imgs/dailypit/Asia6.jpg","Asia")');
                tx.executeSql('INSERT INTO maindraw (painting_name,painting_img,area) VALUES ("Amer1@Amer2@Amer3@Amer4@Amer5@Amer6","./imgs/dailypit/Amer1.jpg@./imgs/dailypit/Amer2.jpg@./imgs/dailypit/Amer3.jpg@./imgs/dailypit/Amer4.jpg@./imgs/dailypit/Amer5.jpg@./imgs/dailypit/Amer6.jpg","NAmerica")');  
                tx.executeSql('INSERT INTO maindraw (painting_name,painting_img,area) VALUES ("Amer7@Amer8@Amer9@Amer4@Amer10@Amer11","./imgs/dailypit/Amer7.jpg@./imgs/dailypit/Amer8.jpg@./imgs/dailypit/Amer9.jpg@./imgs/dailypit/Amer10.jpg@./imgs/dailypit/Amer11.jpg@./imgs/dailypit/Amer12.jpg","SAmerica")');  
                tx.executeSql('INSERT INTO maindraw (painting_name,painting_img,area) VALUES ("Afica1@Afica2@Afica3@Afica4@Afica5@Afica6","./imgs/dailypit/Afica1.jpg@./imgs/dailypit/Afica2.jpg@./imgs/dailypit/Afica3.jpg@./imgs/dailypit/Afica4.jpg@./imgs/dailypit/Afica5.jpg@./imgs/dailypit/Afica6.jpg","Africa")');                
                tx.executeSql('INSERT INTO maindraw (painting_name,painting_img,area) VALUES ("Asny1@Asny2@Asny3@Asny4@Asny5@Asny6","./imgs/dailypit/Asny1.jpg@./imgs/dailypit/Asny2.jpg@./imgs/dailypit/Asny3.jpg@./imgs/dailypit/Asny4.jpg@./imgs/dailypit/Asny5.jpg@./imgs/dailypit/Asny6.jpg","Pacific")');            }); 
            // db.transaction(function (tx) {
            //     tx.executeSql('drop table maindraw');
            // });

            db.transaction(function(tx) {
                tx.executeSql('select * from maindraw where area= ?', [ctrl.area], function(tx, results) {
                    document.getElementById('main_pit').style.width=2048*results.rows.length+'px';
                    $scope.$apply(function(){
                        for(var j=0;j<results.rows.length;j++){
                            for (var i = 0; i < 6; i++) {
                                var obj = {};
                                obj.painting_name=results.rows.item(j).painting_name.split('@')[i];
                                obj.painting_img=results.rows.item(j).painting_img.split('@')[i];
                                ctrl.main_pit.push(obj);
                            } 
                        }
                        console.log(ctrl.main_pit); 
                        if(ctrl.main_pit.length<=6){
                            document.getElementById('slide_btn').style.display='none';
                            document.getElementById('s_btn').style.display='none';
                        }                          
                        for (var j = 0; j < ctrl.main_pit.length; j++) {
                            checkPit(ctrl.main_pit[j].painting_name, j);
                        }                   
                    });
                });
            });                       
            // var obj = {};

            // $http
            //     .get('./data/maindraw.xml')
            //     .success(function(data, status, headers, config) {
            //         var element = angular.element(data.trim()).find(ctrl.area);
            //         for (var i = 0; i < element.length; i++) {

            //             var product = element.eq(i);

            //             obj = {
            //                 painting_name: product.attr("painting_name"),
            //                 painting_img: product.attr("painting_img"),
            //                 piturl: product.attr("piturl")
            //             };
            //             ctrl.main_pit[i] = obj;
            //         }
            //         if (ctrl.main_pit[0].painting_name == undefined) {
            //             ctrl.main_pit.splice(0, 1);
            //         }
            //         for (var j = 0; j < ctrl.main_pit.length; j++) {
            //             checkPit(ctrl.main_pit[j].painting_name, j);
            //         }
            //     })
            //     .error(function(data, status, headers, config) {});
        }

        function checkPit(pitname, j) {
            if ($window.sessionStorage.user != undefined) {
                var db = openDatabase('history', '1.0', 'test db', 1024 * 1024);
                db.transaction(function(tx) {
                    tx.executeSql('select * from history where name= ? and painting_name=?', [$window.sessionStorage.user, pitname], function(tx, results) {
                        $scope.$apply(function() {
                            if (results.rows.length == 0) {
                                ctrl.icheck[j] = false;
                            } else {
                                ctrl.icheck[j] = true;
                            }
                        });
                    });
                });
            }
        }
        return ctrl;

    }
})();
(function() {
    angular.module('app').controller('MapCtrl', MapCtrl);

    // 全局控制器 
    /* ngInject */
    function MapCtrl($rootScope,$timeout, $window, $scope, $http, $state, initService, DirectService) {
        var ctrl = {
            init_data: false,
            open_show: true,
            pointShow: false,
            lg_nav: true,
            mapP: [{
                point: "p_three",
                route: "main.Asia",
                area: "Asia",
                tit: './imgs/common/asia_tit.png'
            },{
                point: "p_two",
                route: "main.Europe",
                area: "Europe",
                tit: './imgs/common/eurtit.png'
            }, {
                point: "p_four",
                route: "main.Africa",
                area: "Africa",
                tit: './imgs/common/afica_tit.png'
            }, {
                point: "p_one",
                route: "main.NAmerica",
                area: "NAmerica",
                tit: './imgs/common/namer_tit.png'
            }, {
                point: "p_five",
                route: "main.SAmerica",
                area: "SAmerica",
                tit: './imgs/common/samer_tit.png'
            }, {
                point: "p_six",
                route: "main.Pacific",
                area: "Pacific",
                tit: './imgs/common/ocean_tit.png'
            }],
            toBack: toBack,
            navShow: navShow,
            tipDel: tipDel,
            backGame: backGame,
            backDraw:backDraw,
            backGame:backGame,
            backMap:backMap
        };
        (function() {  
            var audio = document.getElementById('mp3Btn');
            audio.volume=0.2;
            if($rootScope.musicShow){
                audio.play();
            }else{
                audio.pause();
            }
            
            if ($window.sessionStorage.myicon == undefined) {
                $rootScope.avatar = './imgs/common/myicon.png';
            } else {
                $rootScope.avatar = $window.sessionStorage.myicon;
            }

            $rootScope.tipShow = false;
            navSlide();
            window.onresize = function() {
                location.replace(document.referrer);
            };      
        })();

        function backMap(){
            $state.go('main.map');
        }        

        function backDraw(){
            $state.go('main.paint');
        }
        function backGame(){
            $state.go('main.game');
        } 
        function backMy(){
            $state.go('main.my');
        }        

        function tipDel() {
            $rootScope.tipShow = false;
        }

        function navShow() {
            $("#nav-bar").animate({ left: '0rem' });
        }

        function navSlide() {
            var startx, starty;

            var start = function(e) {
                if (!e.touches) {
                    startx = e.pageX;
                    starty = e.pageY;

                } else {
                    startx = e.touches[0].pageX;
                    starty = e.touches[0].pageY;
                }
            }
            var end = function(e) {
                var endx, endy;
                if (!e.touches) {
                    endx = e.pageX;
                    endy = e.pageY;

                } else {
                    endx = e.changedTouches[0].pageX;
                    endy = e.changedTouches[0].pageY;
                }

                var direction = DirectService.getDirection(startx, starty, endx, endy);
                switch (direction) {
                    case 3:
                        $("#nav-bar").animate({ left: '-3.2rem' });
                        break;
                    case 4:
                        $("#nav-bar").animate({ left: '0rem' });
                        break;
                    default:
                }
            }
            window.addEventListener("touchstart", start);
            window.addEventListener("mousedown", start);
            window.addEventListener("touchend", end);
            window.addEventListener("mouseup", end);
        }

        function toBack() {
            history.back();
        }

        return ctrl;

    }
})();
(function() {
    angular.module('app').controller('MyCollectCtrl', MyCollectCtrl);

    // 全局控制器 
    /* ngInject */
    function MyCollectCtrl($rootScope, $window, $scope, $http, BackService, $state) {
        var ctrl = {
            date: null,
            collect_pit:[],
            collectdate:[],
            musicShow: true,
            mShow: mShow            
        };
        (function() {
            initCollect();
            // var bgmusic = document.getElementById('mp3Btn');
            // bgmusic.volume = 0.2;
            // bgmusic.play();             
        })();

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }        

        function initCollect() {
            ctrl.collectdb = openDatabase('collect', '1.0', 'test db', 1024 * 1024);
            ctrl.collectdb.transaction(function(tx) {
                tx.executeSql('select * from collect where name= ?', [$window.sessionStorage.user], function(tx, results) {
                    if(results.rows.length==0){
                        document.getElementById('no-con').style.display="block";
                    }else{
                        document.getElementById('no-con').style.display="none";
                        $scope.$apply(function(){
                            var date = [];
                            for (var i = 0; i < results.rows.length; i++) {
                                ctrl.collect_pit.push(results.rows.item(i));
                                date[i] = ctrl.collect_pit[i].date;
                                if (date.indexOf(date[i]) != i) {
                                    date.splice(i, 1);
                                }
                            }
                            for (var j = 0; j < date.length; j++) {
                                datePit(date[j]);
                            }                            
                        });
                    }
                });
            });
        }

        function datePit(date) {
            var db = openDatabase('collect', '1.0', 'test db', 1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('select * from collect where name=? AND date= ?', [$window.sessionStorage.user,date], function(tx, results) {
                    $scope.$apply(function() {
                        var cdate = {};
                        cdate.date = date;
                        cdate.img=[];
                        for(var i = 0; i < results.rows.length; i++){
                            cdate.img[i] = results.rows.item(i);
                        }
                        ctrl.collectdate.push(cdate);
                        console.log(ctrl.collectdate);
                    });
                });
            });
        }        
        return ctrl;
    }
})();
(function() {
    angular.module('app').controller('Myctrl', Myctrl);

    // 全局控制器 
    /* ngInject */
    function Myctrl($rootScope, $window, $scope, $webSql, $http, $state, BackService, ngDialog) {
        var ctrl = {
            login_user: { username: '', password: '' },
            add_user: { username: '', password: '', private_que: '', private_ans: '' },
            code_user: { username: '', password: '', private_que: '', private_ans: '' },
            login: login,
            logout: logout,
            fileData: null,
            register: register,
            imgUpload: imgUpload,
            closeDialog:closeDialog,
            pitrueshow: false,
            resShow: false,
            findcode: false,
            sure_code: '',
            collect_pit: [],
            inpcode: '',
            code: '',
            db: null,
            icon:[{
                id:'kaola',
                icheck:false,
                path:'./imgs/myicon/myicon.png',
            },{
                id:'milu',
                icheck:false,
                path:'./imgs/myicon/milu.png',
            },{
                id:'elephant',
                icheck:false,
                path:'./imgs/myicon/elephant.png',
            },{
                id:'panda',
                icheck:false,
                path:'./imgs/myicon/panda.png',
            },{
                id:'duck',
                icheck:false,
                path:'./imgs/myicon/duck.png',
            },{
                id:'bear',
                icheck:false,
                path:'./imgs/myicon/bear.png',
            }], 
            iconChoose:iconChoose,
            iconUpload:iconUpload,            
            updateCode: updateCode,
            resetCode: resetCode,
            textUpload: textUpload
        };
        (function() {
            var db;
            db = openDatabase('history', '1.0', 'test db', 1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('CREATE TABLE IF NOT EXISTS history (id unique,name,painting_name,painting_img,date)');
            });            
            if (!ctrl.resShow) {
                updateCode();
            }
            initUserDB();
            mydrawDB();
            inituser();
            iconInit();
            mycollectDB();
            // clearDB();
        })();

        return ctrl;

        function clearDB(){
            var db1;
            db1 = openDatabase('history', '1.0', 'test db', 1024 * 1024);
            db1.transaction(function (tx) {
                tx.executeSql('drop table history');
            });             
            var db2;
            db2 = openDatabase('mypaint', '1.0', 'test db', 10*1024 * 1024); 
            db2.transaction(function (tx) {
                tx.executeSql('drop table mypaint');
            }); 
            var db3;
            db3 = openDatabase('collect', '1.0', 'test db', 10*1024 * 1024); 
            db3.transaction(function (tx) {
                tx.executeSql('drop table collect');
            });  
        }

        function iconInit(){
            if($window.sessionStorage.user!=undefined){
                var user = $window.sessionStorage.user;
                var db = openDatabase('users', '1.0', 'test db', 1024 * 1024);
                db.transaction(function(tx) {
                    tx.executeSql('select * from user where name= ?', [user], function(tx, results) {
                        for(var i=0;i<ctrl.icon.length;i++){
                            if(ctrl.icon[i].path==results.rows.item(0).myicon){
                                ctrl.icon[i].icheck=true; 
                            }
                        }
                    });
                });
            }
            
        }

        function closeDialog(){
            ngDialog.closeAll();
        }

        function iconUpload(){
            for(var i=0;i<ctrl.icon.length;i++){
                if(ctrl.icon[i].icheck){
                    (function(i){
                        ctrl.db.transaction(function(tx) {
                            tx.executeSql('UPDATE user SET myicon=? WHERE name=?', [ctrl.icon[i].path, $window.sessionStorage.user], function(tx, results) {
                                console.log('更新成功！');
                                inituser();
                                $window.sessionStorage.myicon=ctrl.icon[i].path;
                                ngDialog.closeAll();
                            });
                        }); 
                    })(i);  
                }
            } 
        }
        // function 

        function iconChoose(i){           
            for(var j=0;j<ctrl.icon.length;j++){
                ctrl.icon[j].icheck=false;              
            }
            ctrl.icon[i].icheck=true; 
        }


        function mydrawDB(){
            var db;
            db = openDatabase('mypaint', '1.0', 'test db', 10*1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('CREATE TABLE IF NOT EXISTS mypaint (id unique,name,painting_img,date)');
            }); 
            // db.transaction(function (tx) {
            //     tx.executeSql('drop table mypaint');
            // });  
        }
        function mycollectDB(){
            var db = openDatabase('collect', '1.0', 'test db', 1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('CREATE TABLE IF NOT EXISTS collect (id unique,name,painting_name,painting_img,date)');
            }); 
            // db.transaction(function (tx) {
            //     tx.executeSql('drop table mypaint');
            // });  
        }        

        function textUpload() {
            var text = document.getElementById('text').value;
            ctrl.db.transaction(function(tx) {
                tx.executeSql('UPDATE user SET saying=? WHERE name=?', [text, $window.sessionStorage.user], function(tx, results) {
                    console.log('更新成功！');
                    inituser();
                });
            });
        }

        function updateCode() {
            var yzcanvas = document.getElementById('yzcode');
            createCode();
            codeCanvas(yzcanvas);
        }

        function createCode() {
            ctrl.code = '';
            var codeLength = 4;
            var random = new Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
            for (var i = 0; i < codeLength; i++) {
                var index = Math.floor(Math.random() * 62);
                ctrl.code += random[index];
            }
            return ctrl.code;
        }

        function lineX() {
            var ranLineX = Math.floor(Math.random() * 300);
            return ranLineX;
        }

        function lineY() {
            var ranLineY = Math.floor(Math.random() * 150);
            return ranLineY;
        }

        function codeCanvas(codeShow) {
            var cxt = codeShow.getContext('2d');
            //背景颜色
            cxt.fillStyle = '#8dd5e7';
            //矩形左上角x,y坐标以及矩形宽高
            cxt.fillRect(0, 0, 500, 200);
            //生成干扰线50条
            for (var j = 0; j < 50; j++) {
                //线条的颜色
                cxt.strokeStyle = '#666';
                //若省略beginPath，则每点击一次验证码会累积干扰线的条数
                cxt.beginPath();
                cxt.moveTo(lineX(), lineY());
                cxt.lineTo(lineX(), lineY());
                cxt.lineWidth = 2;
                cxt.closePath();
                cxt.stroke();
            }
            //不设置的话里面的文本颜色就是和上面设置的背景色相同
            cxt.fillStyle = '#ddd';
            cxt.font = 'bold 85px Arial';
            //把生成的随机数文本填充到canvas中
            cxt.fillText(createCode(), 20, 100);
        }

        function imgUpload() {
            ngDialog.open({
                template: 'imgupload.html',
                className: 'ngdialog-theme-default ngdialog-theme-imgupload',
                // controller: 'imgUploadCtrl',
                // controllerAs: 'ic',
                scope: $scope
            });            
        }
        

        function initUserDB() {
            if (!window.openDatabase) {
                alert('当前环境不支持websql');
            } else {
                ctrl.db = openDatabase('users', '1.0', 'test db', 1024 * 1024);
                ctrl.db.transaction(function(context) {
                    context.executeSql('CREATE TABLE IF NOT EXISTS user (name unique,password,question,answer,saying,myicon)');
                    context.executeSql('INSERT INTO user (name,password,question,answer,saying,myicon) VALUES ("chen", "123","wo","wo","I am chen","./imgs/myicon/myicon.png")');
                    context.executeSql('INSERT INTO user (name,password,question,answer,saying,myicon) VALUES ("可", "123","wo","wo","I am 可","./imgs/myicon/myicon.png")');
                });
            };
        }

        function login() {
            if (!ctrl.login_user.username || !ctrl.login_user.password) {
                openDialog('用户名或密码未填写');
            } else {
                ctrl.db.transaction(function(tx) {
                    tx.executeSql('select * from user where name= ?', [ctrl.login_user.username], function(tx, results) {
                        if (results.rows.length == 0) {
                            openDialog('用户不存在，请先注册！');
                        } else {
                            if (results.rows.item(0).password != ctrl.login_user.password) {
                                openDialog('用户或密码错误！');
                            } else {
                                $scope.$apply(function() {
                                    // $window.localStorage.setItem("add", ctrl.login_user.username);
                                    $window.sessionStorage.setItem("user", ctrl.login_user.username);
                                    $window.sessionStorage.setItem("myicon", results.rows.item(0).myicon);
                                    document.getElementById('imgId').src = results.rows.item(0).myicon;
                                    document.getElementById('text').value = results.rows.item(0).saying;
                                    $rootScope.my_state = true;
                                });
                            }
                        }
                    });
                });
            }
        }

        function inituser() {
            if ($window.sessionStorage.user == undefined) {
                $rootScope.my_state = false;
            } else {
                var user = $window.sessionStorage.user;
                ctrl.db.transaction(function(tx) {
                    tx.executeSql('select * from user where name= ?', [user], function(tx, results) {
                        document.getElementById('imgId').src = results.rows.item(0).myicon;
                        document.getElementById('text').value = results.rows.item(0).saying;
                    });
                });
                $rootScope.my_state = true;
            }
        }

        function logout() {
            delete $window.sessionStorage.user;
            delete $window.sessionStorage.myicon;
            $rootScope.my_state = false;
        }

        function openDialog(tip) {
            $rootScope.tip = "";
            $rootScope.tip = tip;
            ngDialog.open({
                template: '<div class="modal-body">{{tip}}</div>',
                plain: true,
                className: 'ngdialog-theme-default ngdialog-theme-tip',
                scope: $scope
            });
            updateCode();
        }

        function register() {
            ctrl.code = ctrl.code.toLowerCase();
            ctrl.inpcode = ctrl.inpcode.toLowerCase();
            if (!ctrl.add_user.username || !ctrl.add_user.password || !ctrl.add_user.private_que || !ctrl.add_user.private_ans || !ctrl.inpcode || !ctrl.sure_code) {
                openDialog('请确保信息的完整性！');
            } else {
                if (ctrl.sure_code != ctrl.add_user.password) {
                    openDialog('确认密码输入不一致！');
                } else if (ctrl.inpcode != ctrl.code) {
                    openDialog('验证码错误！');
                } else if (ctrl.sure_code == ctrl.add_user.password && ctrl.inpcode == ctrl.code) {
                    ctrl.db.transaction(function(tx) {
                        tx.executeSql('insert into user (name,password,question,answer,saying,myicon) VALUES (?, ?,?,?,?,?)', [ctrl.add_user.username, ctrl.add_user.password, ctrl.add_user.private_que, ctrl.add_user.private_ans, '', './imgs/myicon/myicon.png'], function() {
                            openDialog('注册成功！');
                        });
                    });
                }
            }
        }

        function resetCode() {
            if (ctrl.code_user.username && ctrl.code_user.private_que && ctrl.code_user.private_ans && ctrl.code_user.password && ctrl.confim_code && ctrl.code_user.password == ctrl.confim_code) {
                ctrl.db.transaction(function(tx) {
                    tx.executeSql('select * from user where name= ? AND question=? AND answer=?', [ctrl.code_user.username, ctrl.code_user.private_que, ctrl.code_user.private_ans], function(tx, results) {
                        // console.log(results.rows.item.length);
                        if (results.rows.length == 0) {
                            openDialog('该用户保密问题或答案错误！');
                        } else {
                            ctrl.db.transaction(function(tx) {
                                tx.executeSql('UPDATE user SET password=? WHERE name=?', [ctrl.code_user.password, ctrl.code_user.username], function(tx, results) {
                                    openDialog('重置密码成功!');
                                });
                            });
                        }
                    });
                });

            }else if(ctrl.code_user.password != ctrl.confim_code){
                openDialog('确认密码输入不一致！');
            } else {
                openDialog('请填写完整！');
            }
        }
    }
})();
(function() {
    angular.module('app').controller('MyDrawCtrl', MyDrawCtrl);

    // 全局控制器 
    /* ngInject */
    function MyDrawCtrl($rootScope, $window, $scope, $http, $state) {
        var ctrl = {
            musicShow: true,
            mdc_detail: false,
            date: null,
            my_pit:[],
            mydate:[],
            mShow: mShow,
            mydrawShow:mydrawShow
        };
        (function() {
            initMyDraw();
            var myDate = new Date();
            var mytime = myDate.format("yyyy-MM-dd");
            ctrl.date = mytime;  
            // var bgmusic = document.getElementById('mp3Btn');
            // bgmusic.volume = 0.2;
            // bgmusic.play();                      
        })();

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }


        function initMyDraw() {
            var db= openDatabase('mypaint', '1.0', 'test db', 10*1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('select * from mypaint where name= ?', [$window.sessionStorage.user], function(tx, results) {
                    if(results.rows.length==0){
                        document.getElementById('no-con').style.display="block";
                    }else{
                        document.getElementById('no-con').style.display="none";
                        $scope.$apply(function(){
                            var date = [];
                            for (var i = 0; i < results.rows.length; i++) {
                                ctrl.my_pit.push(results.rows.item(i));
                                date[i] = ctrl.my_pit[i].date;
                                if (date.indexOf(date[i]) != i) {
                                    date.splice(i, 1);
                                }
                            }
                            for (var j = 0; j < date.length; j++) {
                                datePit(date[j]);
                            }                            
                        });
                    }
                });
            });          
            // ctrl.mydraw=[];
            // // ctrl.date=$window.localStorage.mypit.split('@')[1];
            // for(var j=1;j<$window.sessionStorage.mypit.split('@').length;j++){
            //     ctrl.mydraw.push($window.sessionStorage.mypit.split('@')[j]);
            // }
            // console.log(ctrl.mydraw);
            
        }
        function datePit(date) {
            var db = openDatabase('mypaint', '1.0', 'test db', 10*1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('select * from mypaint where name=? AND date= ?', [$window.sessionStorage.user,date], function(tx, results) {
                    $scope.$apply(function() {
                        var cdate = {};
                        cdate.date = date;
                        cdate.img=[];
                        for(var i = 0; i < results.rows.length; i++){
                            cdate.img[i] = results.rows.item(i);
                        }
                        ctrl.mydate.push(cdate);
                        console.log(ctrl.mydate);
                    });
                });
            });
        }  
        function mydrawShow(id){
            var db = openDatabase('mypaint', '1.0', 'test db', 1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('select * from mypaint where id= ?', [id], function(tx, results) {
                    $('#md-mask').fadeIn();
                    $('#md-pit-show').fadeIn(600);
                    document.getElementById('md-pit-show').style.backgroundImage = "url(" + results.rows.item(0).painting_img + ")";
                    document.getElementById('md-mask').addEventListener("touchstart", function(e) {
                        $('#md-mask').fadeOut();
                        $('#md-pit-show').fadeOut();                
                    });                    
                });
            });            
            // $('#md-mask').fadeIn();
            // $('#md-pit-show').fadeIn(600);
            // document.getElementById('md-mask').addEventListener("touchstart", function(e) {
            //     $('#md-mask').fadeOut();
            //     $('#md-pit-show').fadeOut();                
            // });
        }              
        return ctrl;

    }
})();
(function() {
    angular.module('app').controller('MyPitCtrl', MyPitCtrl);

    // 全局控制器 
    /* ngInject */
    function MyPitCtrl($rootScope, $window, $scope, $http, $state) {
        var ctrl = {
            my_pit: [],
            date: {},
            hdate: {},
            hisdate: [],
            musicShow: true,
            mShow: mShow
        };
        (function() {
            initHistory();
            // var bgmusic = document.getElementById('mp3Btn');
            // bgmusic.volume = 0.2;
            // bgmusic.play();            
        })();

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }

        function initHistory() {
            var db = openDatabase('history', '1.0', 'test db', 1024 * 1024);
            db.transaction(function(tx) {

                tx.executeSql('select * from history where name = ?', [$window.sessionStorage.user], function(tx, results) {
                    if (results.rows.length == 0) {
                        document.getElementById('no-con').style.display="block";
                    } else {
                         document.getElementById('no-con').style.display="none";
                        $scope.$apply(function() {
                            var date = [];
                            for (var i = 0; i < results.rows.length; i++) {
                                ctrl.my_pit.push(results.rows.item(i));
                                date[i] = ctrl.my_pit[i].date;
                                if (date.indexOf(date[i]) != i) {
                                    date.splice(i, 1);
                                }
                            }
                            for (var j = 0; j < date.length; j++) {
                                datePit(date[j])
                            }
                        });
                    }
                });
            });
        }

        function datePit(date) {
            var db = openDatabase('history', '1.0', 'test db', 1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('select * from history where name=? AND date= ?', [$window.sessionStorage.user,date], function(tx, results) {
                    $scope.$apply(function() {
                        var hdate = {};
                        hdate.date = date;
                        hdate.img = [];
                        for (var i = 0; i < results.rows.length; i++) {
                            hdate.img[i] = results.rows.item(i);
                        }
                        ctrl.hisdate.push(hdate);
                        console.log(ctrl.hisdate);
                    });
                });
            });
        }
        return ctrl;

    }
})();
(function() {
    angular.module('app').controller('NearCtrl', NearCtrl);

    // 全局控制器 
    /* ngInject */
    function NearCtrl($rootScope,$window, $scope, $http, $state) {
        var ctrl = {
            near_pit: [],
            backMap:backMap
        };
        (function() {
            initPit();             
        })();

        function backMap(){
            $state.go('main.map');
        }

        function initPit() {
            var db = openDatabase('neardraw', '1.0', 'test db', 1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('CREATE TABLE IF NOT EXISTS neardraw (piturl unique,painting_img,tit,time,type,name,con)');
                tx.executeSql('INSERT INTO neardraw (tit,piturl,painting_img,time,type,name,con) VALUES ("你的日常-songyanan","./imgs/dailypit/r1.jpg","./imgs/dailypit/near_detailbg.jpg","2018.01.15-12.05","头脑风暴","大侄子Daz_Qu151","  一觉醒来发现自己变成了小Z，又惊又喜的同时，你的生活会发生什么？是一如往常：在早晚地铁里挤到变形、在甲方爸爸的需求中痛不欲生、在美颜相机下才能拍出“真实”自我…打开脑洞，跟着大植子一起画\“转\”Z日常~")');
                tx.executeSql('INSERT INTO neardraw (tit,piturl,painting_img,time,type,name,con) VALUES ("你的日常-songyanan","./imgs/dailypit/l1.jpg","./imgs/dailypit/near_detailbg.jpg","2018.01.15-12.05","头脑风暴","大侄子Daz_Qu151","  一觉醒来发现自己变成了小Z，又惊又喜的同时，你的生活会发生什么？是一如往常：在早晚地铁里挤到变形、在甲方爸爸的需求中痛不欲生、在美颜相机下才能拍出“真实”自我…打开脑洞，跟着大植子一起画\“转\”Z日常~")');
                tx.executeSql('INSERT INTO neardraw (tit,piturl,painting_img,time,type,name,con) VALUES ("你的日常-songyanan","./imgs/dailypit/l2.jpg","./imgs/dailypit/near_detailbg.jpg","2018.01.15-12.05","头脑风暴","大侄子Daz_Qu151","  一觉醒来发现自己变成了小Z，又惊又喜的同时，你的生活会发生什么？是一如往常：在早晚地铁里挤到变形、在甲方爸爸的需求中痛不欲生、在美颜相机下才能拍出“真实”自我…打开脑洞，跟着大植子一起画\“转\”Z日常~")');
                tx.executeSql('INSERT INTO neardraw (tit,piturl,painting_img,time,type,name,con) VALUES ("你的日常-songyanan","./imgs/dailypit/r2.jpg","./imgs/dailypit/near_detailbg.jpg","2018.01.15-12.05","头脑风暴","大侄子Daz_Qu151","  一觉醒来发现自己变成了小Z，又惊又喜的同时，你的生活会发生什么？是一如往常：在早晚地铁里挤到变形、在甲方爸爸的需求中痛不欲生、在美颜相机下才能拍出“真实”自我…打开脑洞，跟着大植子一起画\“转\”Z日常~")');
                tx.executeSql('INSERT INTO neardraw (tit,piturl,painting_img,time,type,name,con) VALUES ("你的日常-songyanan","./imgs/dailypit/l3.jpg","./imgs/dailypit/near_detailbg.jpg","2018.01.15-12.05","头脑风暴","大侄子Daz_Qu151","  一觉醒来发现自己变成了小Z，又惊又喜的同时，你的生活会发生什么？是一如往常：在早晚地铁里挤到变形、在甲方爸爸的需求中痛不欲生、在美颜相机下才能拍出“真实”自我…打开脑洞，跟着大植子一起画\“转\”Z日常~")');
                tx.executeSql('INSERT INTO neardraw (tit,piturl,painting_img,time,type,name,con) VALUES ("你的日常-songyanan","./imgs/dailypit/r3.jpg","./imgs/dailypit/near_detailbg.jpg","2018.01.15-12.05","头脑风暴","大侄子Daz_Qu151","  一觉醒来发现自己变成了小Z，又惊又喜的同时，你的生活会发生什么？是一如往常：在早晚地铁里挤到变形、在甲方爸爸的需求中痛不欲生、在美颜相机下才能拍出“真实”自我…打开脑洞，跟着大植子一起画\“转\”Z日常~")');
                tx.executeSql('INSERT INTO neardraw (tit,piturl,painting_img,time,type,name,con) VALUES ("你的日常-songyanan","./imgs/dailypit/l4.jpg","./imgs/dailypit/near_detailbg.jpg","2018.01.15-12.05","头脑风暴","大侄子Daz_Qu151","  一觉醒来发现自己变成了小Z，又惊又喜的同时，你的生活会发生什么？是一如往常：在早晚地铁里挤到变形、在甲方爸爸的需求中痛不欲生、在美颜相机下才能拍出“真实”自我…打开脑洞，跟着大植子一起画\“转\”Z日常~")');
                tx.executeSql('INSERT INTO neardraw (tit,piturl,painting_img,time,type,name,con) VALUES ("你的日常-songyanan","./imgs/dailypit/r4.jpg","./imgs/dailypit/near_detailbg.jpg","2018.01.15-12.05","头脑风暴","大侄子Daz_Qu151","  一觉醒来发现自己变成了小Z，又惊又喜的同时，你的生活会发生什么？是一如往常：在早晚地铁里挤到变形、在甲方爸爸的需求中痛不欲生、在美颜相机下才能拍出“真实”自我…打开脑洞，跟着大植子一起画\“转\”Z日常~")');            
            });            
            db.transaction(function(tx) {
                tx.executeSql('select * from neardraw',[], function(tx, results) {
                    $scope.$apply(function(){
                        for (var i = 0; i < results.rows.length; i++) {
                            var obj={};
                            obj.painting_img=results.rows.item(i).piturl;
                            obj.painting_name=results.rows.item(i).tit;
                            ctrl.near_pit[i]=obj;
                        }   
                    }); 
                });
            });       
        }


        return ctrl;

    }
})();
(function() {
    angular.module('app').controller('NearDetailCtrl', NearDetailCtrl);

    // 全局控制器 
    /* ngInject */
    function NearDetailCtrl($rootScope, $stateParams, $window, $scope, $http, $state) {
        var ctrl = {
            pit_name: $stateParams.pit_name,
            near_detail: []
        };
        (function() {
            initPit();
        })();

        function initPit() {
            var db = openDatabase('neardraw', '1.0', 'test db', 1024 * 1024);
            db.transaction(function(tx) {
                tx.executeSql('select * from neardraw where tit = ?', [ctrl.pit_name], function(tx, results) {
                    $scope.$apply(function() {
                        for (var i = 0; i < results.rows.length; i++) {
                            var obj = {};
                            obj = {
                                name: results.rows.item(i).name,
                                painting_img: results.rows.item(i).painting_img,
                                time: results.rows.item(i).time,
                                type: results.rows.item(i).type,
                                tit: results.rows.item(i).tit,
                                con: results.rows.item(i).con
                            };
                            ctrl.near_detail = obj;
                        }
                        document.getElementById('near_img').src=ctrl.near_detail.painting_img;
                    });
                });
            });
        }


        return ctrl;

    }
})();
(function() {
    angular.module('app').controller('PaintBoardCtrl', PaintBoardCtrl);

    // 全局控制器 
    /* ngInject */
    function PaintBoardCtrl($rootScope, $scope, $state, $timeout,  ngDialog, $window, $http) {
        var ctrl = {
            colorChoose: colorChoose,
            color: '#000',
            linewidth: 40,
            musicShow: true,
            mShow: mShow,
            type: 'pen',
            usePen: usePen,
            useEarser: useEarser,
            imgSave: imgSave,
            colorbox: ['#8827ff', '#027efa', '#ffdb11', '#66cc33', '#9e5e30', '#ff7238', '#d52113'],
            colorselect: '#ff7238'
        };
        (function() {
            var canvas = document.getElementById('create-con');
            $scope.context = canvas.getContext('2d');
            listenToUser(canvas);
            colorPick();
            var myDate = new Date();
            var mytime = myDate.format("yyyy-MM-dd");
            ctrl.date = mytime;            
            var btn = document.getElementById('img-save');         
        })();
        return ctrl;

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }

        function openDialog(tip) {
            $rootScope.tip = "";
            $rootScope.tip = tip;
            ngDialog.open({
                template: '<div class="modal-body">{{tip}}</div>',
                plain: true,
                className: 'ngdialog-theme-default ngdialog-theme-tip',
                scope: $scope
            });
        }        
        //图片保存
        function imgSave() {                   
            if ($window.sessionStorage.user == undefined) {
                openDialog('请先登录！');
                    $timeout(function() {
                        ngDialog.closeAll();
                        $state.go('main.my');
                    }, 1000);
            } else {
                var canvas = document.getElementById('create-con');
                var ctx = canvas.getContext('2d');
                var imageData = canvas.toDataURL('image/jpg');
                var id=new Date().getTime();
                var db = openDatabase('mypaint', '1.0', 'test db', 10*1024 * 1024);
                db.transaction(function(tx) {
                    tx.executeSql('CREATE TABLE IF NOT EXISTS mypaint (id unique,name,painting_img,date)');
                    tx.executeSql('insert into mypaint (id,name,painting_img,date) VALUES (?,?,?,?)', [id,$window.sessionStorage.user,imageData,ctrl.date], function() {
                        console.log('保存成功！');
                        document.getElementById('img-save').style.background='#78dfff';
                    });                
                });                    
            }
        }

        function getPixelColor(canvas, x, y) {
            var thisContext = canvas.getContext("2d");
            var imageData = thisContext.getImageData(x, y, 1, 1);
            // 获取该点像素数据
            var pixel = imageData.data;
            var r = pixel[0];
            var g = pixel[1];
            var b = pixel[2];
            var a = 1;
            var rHex = r.toString(16);
            r < 16 && (rHex = "0" + rHex);
            var gHex = g.toString(16);
            g < 16 && (gHex = "0" + gHex);
            var bHex = b.toString(16);
            b < 16 && (bHex = "0" + bHex);
            var rgbaColor = "rgba(" + r + "," + g + "," + b + "," + a + ")";
            var rgbColor = "rgb(" + r + "," + g + "," + b + ")";
            var hexColor = "#" + rHex + gHex + bHex;
            return {
                rgba: rgbaColor,
                rgb: rgbColor,
                hex: hexColor,
                r: r,
                g: g,
                b: b,
                a: a
            };
        }

        function colorPick() {
            var colorpick = document.getElementById('color-gra');
            var colorhandle = document.getElementById('color-handle');
            var ctx = colorpick.getContext("2d");
            var my_gradient = ctx.createLinearGradient(0, 0, 0, 360);
            my_gradient.addColorStop(0, 'white');
            my_gradient.addColorStop(0.5, ctrl.colorselect);
            my_gradient.addColorStop(1, "black");
            ctx.fillStyle = my_gradient;
            ctx.fillRect(0, 0, colorpick.width, colorpick.height);

            var ifBool = false;
            var start = function(e) {
                e.stopPropagation();
                ifBool = true;
            }
            var move = function(e) {
                var x, y;
                if (ifBool) {
                    if (!e.touches) {
                        x = e.pageX;
                        y = e.pageY;

                    } else {
                        x = e.touches[0].clientX;
                        y = e.touches[0].clientY;
                    }
                    var lineDiv_top = getPosition(colorpick).top;
                    var minDiv_top = y - lineDiv_top;
                    if (minDiv_top >= colorpick.offsetHeight - 1) {
                        minDiv_top = colorpick.offsetHeight - 1;
                    }
                    if (minDiv_top < 0) {
                        minDiv_top = 0;
                    }
                    if (minDiv_top > 340) {
                        minDiv_top = 340;
                    }
                    colorhandle.style.top = minDiv_top + "px";

                    var colorData = getPixelColor(colorpick, 5, minDiv_top);
                    ctrl.colorselect = colorData.rgba;
                    // $("canvas").css("backgroundColor", ctrl.colorselect);
                    initStyle();
                }
            }
            var end = function(e) {
                ifBool = false;
            }
            colorhandle.addEventListener("touchstart", start);
            colorhandle.addEventListener("mousedown", start);
            window.addEventListener("touchmove", move);
            window.addEventListener("mousemove", move);

            window.addEventListener("touchend", end);
            window.addEventListener("mouseup", end);

            var getPosition = function(node) {

                var top = node.offsetTop;
                var left = node.offsetLeft;
                current = node.offsetParent;　　
                while (current != null) {　　
                    left += current.offsetLeft;　　
                    top += current.offsetTop;　　
                    current = current.offsetParent;　　
                    // console.log(top);
                }
                return {
                    "left": left,
                    "top": top
                };
            }
        }

        function initStyle() {
            $scope.context.strokeStyle = ctrl.colorselect;
            $scope.context.lineWidth = ctrl.linewidth;
            var penhead = document.getElementById('pen-head');
            penhead.style.fill = ctrl.colorselect;
        }

        function colorChoose(index) {
            var ol = document.getElementById('colorselect');
            var list = ol.getElementsByTagName('li');
            for (var i = 0; i < 7; i++) {
                list[i].style.border = "none";
            }
            list[index].style.border = "7px solid #fff";
            ctrl.colorselect = list[index].style.background;
            colorPick();
            initStyle();
        }

        function usePen() {
            document.getElementById('pen-h').style.bottom= 3.28+'rem';;
            document.getElementById('pen').style.top=0+'rem';
            document.getElementById('earser').style.top=0.888889+'rem';            
            ctrl.type = 'pen';
        }

        function useEarser() {
            document.getElementById('pen-h').style.bottom=2.78+'rem';
            document.getElementById('pen').style.top=0.5+'rem';
            document.getElementById('earser').style.top=0.2+'rem';            
            ctrl.type = 'earser';
        }

        function drawLine(x1, y1, x2, y2) {
            $scope.context.beginPath();
            $scope.context.moveTo(x1, y1); // 起点
            $scope.context.lineTo(x2, y2); // 终点
            initStyle();
            $scope.context.stroke();
            $scope.context.closePath();
        }

        function autoSetCanvasSize(canvas) {
            setCanvasSize();
            window.onresize = function() {
                setCanvasSize();
            }
            function setCanvasSize() {
                var canvas = document.getElementById('create-con');
                $scope.pageWidth = canvas.getBoundingClientRect().width;
                $scope.pageHeight = canvas.getBoundingClientRect().height;
                canvas.width = $scope.pageWidth;
                canvas.height = $scope.pageHeight;
            }
        }

        function listenToUser(canvas) {
            autoSetCanvasSize(canvas);
            // var using = false;
            var lastPoint = {
                x: undefined,
                y: undefined
            };
            canvas.addEventListener("touchstart", function(e) {
                e.stopPropagation();
                var x = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                    var y = e.touches[0].clientY - canvas.getBoundingClientRect().top;
                    // using = true;
                    if (ctrl.type == "earser") {
                        $scope.context.clearRect(x - ctrl.linewidth, y - ctrl.linewidth, ctrl.linewidth * 2, ctrl.linewidth * 2);
                    } else {
                        lastPoint = {
                            "x": x,
                            "y": y
                        }
                    }                
                //阻止页面的滑动默认事件
                document.addEventListener("touchmove", defaultEvent, false);
            }, false)
            canvas.addEventListener("touchmove", function(e) {
                e.stopPropagation();
                var x = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                    var y = e.touches[0].clientY - canvas.getBoundingClientRect().top;
                    // if (!using) { return; }

                    if (ctrl.type == "earser") {
                        $scope.context.clearRect(x - ctrl.linewidth, y - ctrl.linewidth, ctrl.linewidth * 2, ctrl.linewidth * 2);
                    } else {
                        var newPoint = {
                            "x": x,
                            "y": y
                        }
                        drawLine(lastPoint.x, lastPoint.y, newPoint.x, newPoint.y);
                        lastPoint = newPoint;
                    }
            }, false);
            canvas.addEventListener("touchend", function() {
                // using = false;
                document.removeEventListener("touchmove", defaultEvent, false);
            }, false);
            function defaultEvent(e) {
                e.preventDefault();
            }    
        }
    }


})();
(function() {
    angular.module('app').controller('PaintCtrl', PaintCtrl);

    // 全局控制器 
    /* ngInject */
    function PaintCtrl($rootScope, $scope, $state, $timeout, ngDialog, $window, $http) {
        var ctrl = {
            colorChoose: colorChoose,
            color: '#000',
            linewidth: 40,
            musicShow: true,
            mShow: mShow,
            type: 'pen',
            usePen: usePen,
            useEarser: useEarser,
            imgSave: imgSave,
            colorbox: ['#8827ff', '#027efa', '#ffdb11', '#66cc33', '#9e5e30', '#ff7238', '#d52113'],
            colorselect: '#ff7238'
        };
        (function() {
            var canvas = document.getElementById('create-con');
            $scope.context = canvas.getContext('2d');
            listenToUser(canvas);
            colorPick();
            // var bgmusic = document.getElementById('mp3Btn');
            // bgmusic.volume = 0.2;
            // bgmusic.play();          
            var btn = document.getElementById('img-save');
            
        })();
        return ctrl;

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }

        function getPixelColor(canvas, x, y) {
            var thisContext = canvas.getContext("2d");
            var imageData = thisContext.getImageData(x, y, 1, 1);
            // 获取该点像素数据
            var pixel = imageData.data;
            var r = pixel[0];
            var g = pixel[1];
            var b = pixel[2];
            var a = 1;
            var rHex = r.toString(16);
            r < 16 && (rHex = "0" + rHex);
            var gHex = g.toString(16);
            g < 16 && (gHex = "0" + gHex);
            var bHex = b.toString(16);
            b < 16 && (bHex = "0" + bHex);
            var rgbaColor = "rgba(" + r + "," + g + "," + b + "," + a + ")";
            var rgbColor = "rgb(" + r + "," + g + "," + b + ")";
            var hexColor = "#" + rHex + gHex + bHex;
            return {
                rgba: rgbaColor,
                rgb: rgbColor,
                hex: hexColor,
                r: r,
                g: g,
                b: b,
                a: a
            };
        }

        function colorPick() {
            var colorpick = document.getElementById('color-gra');
            var colorhandle = document.getElementById('color-handle');
            var ctx = colorpick.getContext("2d");
            var my_gradient = ctx.createLinearGradient(0, 0, 0, 360);
            my_gradient.addColorStop(0, 'white');
            my_gradient.addColorStop(0.5, ctrl.colorselect);
            my_gradient.addColorStop(1, "black");
            ctx.fillStyle = my_gradient;
            ctx.fillRect(0, 0, colorpick.width, colorpick.height);

            var ifBool = false;
            var start = function(e) {
                e.stopPropagation();
                ifBool = true;
            }
            var move = function(e) {
                var x, y;
                if (ifBool) {
                    if (!e.touches) {
                        x = e.pageX;
                        y = e.pageY;

                    } else {
                        x = e.touches[0].clientX;
                        y = e.touches[0].clientY;
                    }
                    var lineDiv_top = getPosition(colorpick).top;
                    var minDiv_top = y - lineDiv_top;
                    if (minDiv_top >= colorpick.offsetHeight - 1) {
                        minDiv_top = colorpick.offsetHeight - 1;
                    }
                    if (minDiv_top < 0) {
                        minDiv_top = 0;
                    }
                    if (minDiv_top > 340) {
                        minDiv_top = 340;
                    }
                    colorhandle.style.top = minDiv_top + "px";

                    var colorData = getPixelColor(colorpick, 5, minDiv_top);
                    ctrl.colorselect = colorData.rgba;
                    // $("canvas").css("backgroundColor", ctrl.colorselect);
                    initStyle();
                }
            }
            var end = function(e) {
                ifBool = false;
            }
            colorhandle.addEventListener("touchstart", start);
            colorhandle.addEventListener("mousedown", start);
            window.addEventListener("touchmove", move);
            window.addEventListener("mousemove", move);

            window.addEventListener("touchend", end);
            window.addEventListener("mouseup", end);

            var getPosition = function(node) {

                var top = node.offsetTop;
                var left = node.offsetLeft;
                current = node.offsetParent;　　
                while (current != null) {　　
                    left += current.offsetLeft;　　
                    top += current.offsetTop;　　
                    current = current.offsetParent;　　
                    // console.log(top);
                }
                return {
                    "left": left,
                    "top": top
                };
            }
        }

        function initStyle() {
            $scope.context.strokeStyle = ctrl.colorselect;
            $scope.context.lineWidth = ctrl.linewidth;
            var penhead = document.getElementById('pen-head');
            penhead.style.fill = ctrl.colorselect;
        }

        function colorChoose(index) {
            var ol = document.getElementById('colorselect');
            var list = ol.getElementsByTagName('li');
            for (var i = 0; i < 7; i++) {
                list[i].style.border = "none";
            }
            list[index].style.border = "7px solid #fff";
            ctrl.colorselect = list[index].style.background;
            colorPick();
            initStyle();
        }

        function usePen() {
            ctrl.type = 'pen';
        }

        function useEarser() {
            ctrl.type = 'earser';
        }

        function drawLine(x1, y1, x2, y2) {
            $scope.context.beginPath();
            $scope.context.moveTo(x1, y1); // 起点
            $scope.context.lineTo(x2, y2); // 终点
            initStyle();
            $scope.context.stroke();
            $scope.context.closePath();
        }

        function autoSetCanvasSize(canvas) {
            setCanvasSize();

            window.onresize = function() {
                setCanvasSize();
            }

            function setCanvasSize() {
                var canvas = document.getElementById('create-con');
                $scope.pageWidth = canvas.getBoundingClientRect().width;
                $scope.pageHeight = canvas.getBoundingClientRect().height;
                canvas.width = $scope.pageWidth;
                canvas.height = $scope.pageHeight;
            }
        }

        function listenToUser(canvas) {
            autoSetCanvasSize(canvas);
            var using = false;
            var lastPoint = {
                x: undefined,
                y: undefined
            };
            if (document.body.ontouchstart !== undefined) {
                canvas.ontouchstart = function(e) {
                    var x = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                    var y = e.touches[0].clientY - canvas.getBoundingClientRect().top;
                    using = true;
                    if (ctrl.type == "earser") {
                        $scope.context.clearRect(x - ctrl.linewidth, y - ctrl.linewidth, ctrl.linewidth * 2, ctrl.linewidth * 2);
                    } else {
                        lastPoint = {
                            "x": x,
                            "y": y
                        }
                    }
                };
                canvas.ontouchmove = function(e) {
                    var x = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                    var y = e.touches[0].clientY - canvas.getBoundingClientRect().top;
                    if (!using) { return; }

                    if (ctrl.type == "earser") {
                        $scope.context.clearRect(x - ctrl.linewidth, y - ctrl.linewidth, ctrl.linewidth * 2, ctrl.linewidth * 2);
                    } else {
                        var newPoint = {
                            "x": x,
                            "y": y
                        }
                        drawLine(lastPoint.x, lastPoint.y, newPoint.x, newPoint.y);
                        lastPoint = newPoint;
                    }
                };
                canvas.ontouchend = function() {
                    using = false;
                };
            } else {
                // 非触屏设备
                canvas.onmousedown = function(e) {
                    var x = e.clientX - canvas.getBoundingClientRect().left;
                    var y = e.clientY - canvas.getBoundingClientRect().top;
                    using = true;
                    if (ctrl.type == "earser") {
                        $scope.context.clearRect(x - ctrl.linewidth, y - ctrl.linewidth, ctrl.linewidth * 2, ctrl.linewidth * 2);
                    } else {
                        lastPoint = {
                            "x": x,
                            "y": y
                        }
                    }
                };
                canvas.onmousemove = function(e) {
                    var x = e.clientX - canvas.getBoundingClientRect().left;
                    var y = e.clientY - canvas.getBoundingClientRect().top;

                    if (!using) { return; }

                    if (ctrl.type == "earser") {
                        $scope.context.clearRect(x - ctrl.linewidth, y - ctrl.linewidth, ctrl.linewidth * 2, ctrl.linewidth * 2);
                    } else {
                        var newPoint = {
                            "x": x,
                            "y": y
                        }
                        drawLine(lastPoint.x, lastPoint.y, newPoint.x, newPoint.y);
                        lastPoint = newPoint;
                    }

                };
                canvas.onmouseup = function(e) {
                    using = false;
                };
            }

        }
    }


})();
(function() {
    angular.module('app').controller('PitDetailCtrl', PitDetailCtrl);

    // 全局控制器 
    /* ngInject */
    function PitDetailCtrl($rootScope, $timeout, $webSql, $stateParams, $window,ngDialog , $scope, $http, $state, initImg, DirectService) {
        var ctrl = {
            pit: {},
            a: [],
            musicShow: true,
            iCollect: false,
            iAudio: false,
            pdetaildb: null,
            collectdb: null,
            pit_name: $stateParams.pit_name,
            pit_img: $stateParams.pit_img,
            pd_audio:'',
            pit: {},
            cpit: {},
            hpit: {},
            hdate: {},
            mShow: mShow,
            cShow: cShow,
            dragBack: dragBack,
            pitDrag: pitDrag,
            forGame: forGame,
            detailAudio: detailAudio
        };
        (function() {
            $rootScope.tipShow=true;
            ctrl.pitname = "星夜";
            ctrl.collectdb = openDatabase('collect', '1.0', 'test db', 1024 * 1024);
            ctrl.collectdb.transaction(function(tx) {
                tx.executeSql('CREATE TABLE IF NOT EXISTS collect (id unique,name,painting_name,painting_img,date)');
            });
            var myDate = new Date();
            var mytime = myDate.format("yyyy-MM-dd");
            ctrl.date = mytime;

            initDetailDB();
            // initMainDrawDB();
            init(ctrl.pitname);
            detailSlide();
                        
            // var bgmusic = document.getElementById('mp3Btn');
            // bgmusic.volume = 0.2;
            // bgmusic.play(); 
                       
            collectHeart();
            var audio = document.createElement("audio");
            audio.src = './audio/pd.mp3';
            audio.play(); 
            document.body.appendChild(audio);              

        })();

        function initMainDrawDB() {
            if (!window.openDatabase) {
                alert('当前环境不支持websql');
            } else {
                ctrl.db = openDatabase('MainDraw', '1.0', 'test db', 1024 * 1024);
                ctrl.db.transaction(function(context) {
                    context.executeSql('CREATE TABLE IF NOT EXISTS maindraw (name unique,password,question,answer,saying,myicon)');
                    context.executeSql('INSERT INTO maindraw (name,password,question,answer,saying,myicon) VALUES ("chen", "123","wo","wo","I am chen","./imgs/myicon/myicon.png")');
                    context.executeSql('INSERT INTO maindraw (name,password,question,answer,saying,myicon) VALUES ("可", "123","wo","wo","I am 可","./imgs/myicon/myicon.png")');
                });
            };
        }


        function initDetailDB() {
            if (!window.openDatabase) {
                alert('当前环境不支持websql');
            } else {
                ctrl.pdetaildb = openDatabase('daily', '1.0', 'test db', 10 * 1024 * 1024);
                ctrl.pdetaildb.transaction(function(context) {
                    context.executeSql('CREATE TABLE IF NOT EXISTS detail (painting_name unique,painting_artist,painting_audio,painting_detail,dragpoint,dragimg,piturl)');
                    context.executeSql('INSERT INTO detail (painting_name,painting_artist,painting_audio,painting_detail,dragpoint,dragimg,piturl) VALUES ("星夜","梵高","./audio/xingye.mp3",\
                       " 欢迎来到梵高的《星夜》。a有人说：梵高的宇宙，可以在《星夜》中永恒。《星夜》这幅作品是以蓝色为主色调，画中景象是一个望出窗外的景象，以星光中的夜空为主要绘画对象，最近处是一棵柏树。你们觉得油画中的主色调蓝色代表什么感觉呢？a在梵高的《星夜》中他运用歪曲的长线与破碎的短线的线条绘画风格，使得画面呈现出一种炫目的奇幻景象。躁动的夜空、星星、月亮，不安的柏树与平静的村庄、横向的山脉。你们是否感受到画家躁动不安的情感和迷幻的意象世界？......a《星夜》现存于纽约现代艺术馆。",\
                       "0,167,523,1010)915,1048,271,94)684,663,356,323)0,1250,352,292)83,1074,155,155)425,129,105,121)17,295,134,131)410,0,89,86)246,462,96,96)445,435,222,222",\
                       "tree.png,house1.png,house2.png,start1.png,start2.png,start3.png,start4.png,start5.png,start6.png,start7.png","./imgs/dailypit/xingye1.jpg")');
                });
                //                 ctrl.pdetaildb.transaction(function (tx) {
                // tx.executeSql('drop table detail');
                // });
            };
        }

        function init(pit_name) {
            ctrl.pdetaildb.transaction(function(tx) {
                tx.executeSql('select * from detail where painting_name= ?', [pit_name], function(tx, results) {
                    $scope.$apply(function() {
                        var pit = {};
                        pit = results.rows.item(0);
                        pit.dragItem = [];
                        pit.a = pit.painting_detail.split('a');
                        pit.dragpath = pit.dragimg.split(',');
                        pit.dragpit = [{}, {}];
                        for (var j = 0; j < pit.dragpath.length; j++) {
                            pit.dragItem[j] = pit.dragpath[j].split('.')[0];
                            pit.dragpath[j] = './imgs/dailypit/' + pit.dragpath[j];

                            var obj = {};
                            obj.name = pit.dragItem[j];
                            obj.path = pit.dragpath[j];
                            obj.top = parseInt(pit.dragpoint.split(')')[j].split(',')[0]);
                            obj.left = parseInt(pit.dragpoint.split(')')[j].split(',')[1]);
                            obj.width = parseInt(pit.dragpoint.split(')')[j].split(',')[2]);
                            obj.height = parseInt(pit.dragpoint.split(')')[j].split(',')[3]);
                            pit.dragpit[j] = obj;
                        }
                        delete pit.dragItem;
                        delete pit.dragimg;
                        delete pit.dragpath;
                        delete pit.dragpoint;
                        ctrl.pit = pit;
                        historyAdd();
                        console.log(pit);
                        pitDrag();
                    });
                });
            });
        }

        function detailAudio() {      
            ctrl.iAudio = !ctrl.iAudio;
            var audio = document.getElementById('d_audio');
            if (ctrl.iAudio) {
                audio.play();
            } else {
                audio.pause();
            }
        }

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }

        function collectHeart() {
            if ($window.sessionStorage.user == undefined) {
                ctrl.iCollect = false;
            } else {
                var id = [$window.sessionStorage.user, ctrl.pit_name].join('.');
                ctrl.collectdb.transaction(function(tx) {
                    tx.executeSql('select * from collect where id= ?', [id], function(tx, results) {
                        if (results.rows.length == 0) {
                            ctrl.iCollect = false;
                            console.log('false');
                        } else {
                            $scope.$apply(function() {
                                ctrl.iCollect = true;
                                console.log('true');
                            });

                        }
                    });
                });
            }
        }

        function historyAdd() {
            if ($window.sessionStorage.user != undefined) {
                var id = [$window.sessionStorage.user, ctrl.date, ctrl.pit_name].join('.');
                var db;
                db = openDatabase('history', '1.0', 'test db', 1024 * 1024);
                db.transaction(function(tx) {
                    tx.executeSql('CREATE TABLE IF NOT EXISTS history (id unique,name,painting_name,painting_img,date)');
                });
                db.transaction(function(tx) {
                    tx.executeSql('INSERT INTO history (id,name,painting_name,painting_img,date) VALUES (?,?,?,?,?)', [id, $window.sessionStorage.user, ctrl.pit_name, ctrl.pit_img, ctrl.date], function(tx, results) {
                        console.log('记录成功！');
                    });
                });
                // db.transaction(function (tx) {
                //     tx.executeSql('drop table history');
                // });                
            }
        }
        function openDialog(tip) {
            $rootScope.tip = "";
            $rootScope.tip = tip;
            ngDialog.open({
                template: '<div class="modal-body">{{tip}}</div>',
                plain: true,
                className: 'ngdialog-theme-default ngdialog-theme-tip',
                scope: $scope
            });
        }        
        function cShow() {
            var id = [$window.sessionStorage.user, ctrl.pit_name].join('.');
            if (!ctrl.iCollect) {
                if ($window.sessionStorage.user == undefined) {
                    openDialog('请先登录！');
                    $timeout(function() {
                        ngDialog.closeAll();
                        $state.go('main.my');
                    }, 1000);
                } else {
                    ctrl.collectdb.transaction(function(tx) {
                        tx.executeSql('INSERT INTO collect (id,name,painting_img,painting_name,date) VALUES (?,?,?,?,?)', [id, $window.sessionStorage.user, ctrl.pit_img, ctrl.pit_name, ctrl.date], function(tx, results) {
                            $scope.$apply(function() {
                                ctrl.iCollect = true;
                                console.log('收藏成功！');
                            });
                        });
                    });
            // ctrl.collectdb.transaction(function (tx) {
            //         tx.executeSql('drop table collect');
            //     });                      
                }
            } else {
                ctrl.collectdb.transaction(function(tx) {
                    tx.executeSql('delete from collect where id=?', [id], function(tx, results) {
                        $scope.$apply(function() {
                            ctrl.iCollect = false;
                            console.log('取消收藏成功！');
                        });
                    });
                });

            }
        }

        function detailSlide() {
            var startx, starty;

            var start = function(e) {
                if (!e.touches) {
                    startx = e.pageX;
                    starty = e.pageY;

                } else {
                    startx = e.touches[0].pageX;
                    starty = e.touches[0].pageY;
                }
            }
            var end = function(e) {
                var endx, endy;
                if (!e.touches) {
                    endx = e.pageX;
                    endy = e.pageY;

                } else {
                    endx = e.changedTouches[0].pageX;
                    endy = e.changedTouches[0].pageY;
                }

                var direction = DirectService.getDirection(startx, starty, endx, endy);
                switch (direction) {
                    case 1:
                        $("#pd-drag").slideUp(200);
                        $("#pd-detail").slideDown(300);              
                        var audio = document.createElement("audio");
                        audio.src = ctrl.pit.painting_audio;
                        audio.id='d_audio';
                        audio.pause(); 
                        document.body.appendChild(audio);                         
                        break;
                    case 2:
                        $("#pd-drag").slideDown(300);
                        $("#pd-detail").slideUp(200);
                        break;                        
                    default:
                }
            }
            document.addEventListener("touchstart", start);
            document.addEventListener("mousedown", start);
            document.addEventListener("touchend", end);
            document.addEventListener("mouseup", end);
        }

        function dragBack() {

            // pitDrag();
        }

        function forGame() {
            $state.go('main.game');
        }

        function drawImg(X, Y) {
            for (var i = 0; i < ctrl.pit.dragpit; i++) {
                var ctx = document.getElementById("p_detail_drag").getContext("2d");
                var img = [];
                img[i] = new image();
                img[i].src = ctrl.pit.dragpit[i].path;
                ctx.clearRect(0, 0, 1600, 1010);
                ctx.beginPath();
                // img.onload = function() {
                ctx.drawImage(img[i], X, Y, 200, 300);
                // }
                ctx.closePath();
                ctx.stroke();
            }

        }

        function drag(drag) {
            // var block = document.getElementById("block");
            var oW, oH;
            // 绑定touchstart事件
            drag.addEventListener("touchstart", function(e) {
                $scope.$apply(function() {
                    $rootScope.tipShow=false;
                });
                e.stopPropagation();
                var touches = e.touches[0];
                oW = touches.clientX - drag.offsetLeft;
                oH = touches.clientY - drag.offsetTop;
                //阻止页面的滑动默认事件
                document.addEventListener("touchmove", defaultEvent, false);
            }, false)

            drag.addEventListener("touchmove", function(e) {
                e.stopPropagation();
                var touches = e.touches[0];
                var oLeft = touches.clientX - oW;
                var oTop = touches.clientY - oH;
                if (oLeft < 0) {
                    oLeft = 0;
                }
                if(oTop < 0){
                    oTop=0;
                }
                if (oLeft > 1605 - drag.offsetWidth) {
                    oLeft = 1605 - drag.offsetWidth;
                }
                if(oTop > 1010- drag.offsetHeight){
                    oTop = 1010 - drag.offsetHeight
                }
                drag.style.left = oLeft + "px";
                drag.style.top = oTop + "px";
            }, false);

            drag.addEventListener("touchend", function() {
                document.removeEventListener("touchmove", defaultEvent, false);
            }, false);

            function defaultEvent(e) {
                e.preventDefault();
            }
        }

        function createDrag() {
            // console.log(ctrl.piturl);
            var p_bg = document.getElementById("p_bg");
            p_bg.style.backgroundImage = "url(" + ctrl.pit.piturl + ")";
            for (var i = 0; i < ctrl.pit.dragpit.length; i++) {
                var drag_box = document.createElement("div");
                drag_box.setAttribute("class", "can-drag");
                drag_box.setAttribute("id", ctrl.pit.dragpit[i].name);
                p_bg.appendChild(drag_box);
                drag(document.getElementById(ctrl.pit.dragpit[i].name));
            }
        }

        function pitDrag() {
            createDrag();
            for (var i = 0; i < ctrl.pit.dragpit.length; i++) {
                (function(i) {
                    var drag_box = document.getElementById(ctrl.pit.dragpit[i].name);
                    drag_box.style.top = ctrl.pit.dragpit[i].top + 'px';
                    drag_box.style.left = ctrl.pit.dragpit[i].left + 'px';
                    drag_box.style.width = ctrl.pit.dragpit[i].width + 'px';
                    drag_box.style.height = ctrl.pit.dragpit[i].height + 'px';
                    drag_box.style.backgroundImage = "url(" + ctrl.pit.dragpit[i].path + ")";
                })(i);
            }
        }
        return ctrl;

    }
})();
(function() {
    angular.module('app').controller('PuzzleCtrl', PuzzleCtrl);

    // 全局控制器 
    /* ngInject */
    function PuzzleCtrl($rootScope, $scope, $state, $http, $timeout, ngDialog) {
        var ctrl = {
            musicShow: true,
            mShow: mShow,
            puzzleSolved:puzzleSolved
        };
        (function() {
        	$rootScope.tipShow = true;
            // var bgmusic = document.getElementById('mp3Btn');
            // bgmusic.volume = 0.2;
            // bgmusic.play();        
            var audio = document.createElement("audio");
            audio.src = './audio/puzzle.mp3';
            audio.play(); 
            document.body.appendChild(audio);            
        })();

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }

        function openDialog(tip) {
            $rootScope.tip = "";
            $rootScope.tip = tip;
            ngDialog.open({
                template: '<div class="modal-body">{{tip}}</div>',
                plain: true,
                className: 'ngdialog-theme-default ngdialog-theme-tip',
                scope: $scope
            });
        }  

        function puzzleSolved(){
            openDialog('拼图完成！');
        }
        
        return ctrl;
    }
})();
(function() {
    angular.module('app').controller('QuestionCtrl', QuestionCtrl);

    // 全局控制器 
    /* ngInject */
    function QuestionCtrl($rootScope, $stateParams, $window,$timeout,ngDialog, $scope, $http, $state) {
        var ctrl = {
            musicShow: true,
            mShow: mShow,
            qArr: [],
            question: [{
                id: 0,
                q: "小朋友们你们知道《星夜》中最近处的物体是什么吗？",
                aTrue: 1,
                a: ["松树", "柏树", "木棉树"]
            }, {
                id: 1,
                q: "小朋友们你们知道《星夜》中有几颗星星吗？",
                aTrue: 2,
                a: ["5颗", "8颗", "7颗"]
            }, {
                id: 2,
                q: "小朋友们你们知道《星夜》中主要颜色是什么吗？",
                aTrue: 0,
                a: ["蓝色", "黄色", "白色"]
            }],
            qshow: {},
            selectAns: selectAns,
            close:close
        };
        (function() {
            ctrl.qshow = ctrl.question[0];
            // var bgmusic = document.getElementById('mp3Btn');
            // bgmusic.volume = 0.2;
            // bgmusic.play();           
        })();

        function mShow() {
            $rootScope.musicShow = !$rootScope.musicShow;
            var audio = document.getElementById('mp3Btn');
            if ($rootScope.musicShow) {
                audio.play();
            } else {
                audio.pause();
            }
        }
        function close(){
            ngDialog.closeAll();
        }
        function selectAns(index, q) {
            //获取单选按钮列表
            var list = document.getElementsByTagName('i');
            //判断选择是否为设置的答案
            if (index != q.aTrue) {
                for (var i = 0; i < ctrl.question.length; i++) {
                    //初始化按钮背景颜色
                    list[i].style.background = "#fff";
                }
                list[index].style.background = "#f00";
            } else {
                for (var i = 0; i < ctrl.question.length; i++) {
                    list[i].style.background = "#fff";
                }//选择正确按钮为绿色
                list[index].style.background = "#8bff52";
            }
            $timeout(function() {
                //判断当前题目是否为最后一题
                if (q.id < ctrl.question.length - 1 && index == q.aTrue) {
                    //否，题目切换下一题
                    ctrl.qArr[q.id] = true;
                    var qid = q.id + 1;
                    ctrl.qshow = ctrl.question[qid];
                }
                else if(q.id == ctrl.question.length-1&&index == q.aTrue){
                    //是，弹窗提示，题目返回第一题。
                    ngDialog.open({
                            template: 'qa_finsh.html',
                            className: 'ngdialog-theme-default ngdialog-theme-custom',
                            scope: $scope
                    });
                    ctrl.qshow = ctrl.question[0];
                }
            }, 800);
        }
        return ctrl;

    }
})();
angular.module('app').factory('BackService', BackService);

/* ngInject */
function BackService() {

    function init() {
        var back = document.getElementById('backBtn');
        back.volume=0.4;
        back.play();
    }
    return {
        init: init
    };

}
angular.module('app').factory('DirectService', DirectService);

/* ngInject */
function DirectService($rootScope, $window, $http) {

    function getDirection(startx, starty, endx, endy) {
        var angx = endx - startx;
        var angy = endy - starty;
        var result = 0;

        //如果滑动距离太短  
        if (Math.abs(angx) < 300 && Math.abs(angy) < 300) {
            return result;
        }

        function getAngle(angx, angy) {  //计算手机滑屏角度
            return Math.atan2(angy, angx) * 180 / Math.PI;
        };
        
        var angle = getAngle(angx, angy);
        if ((angle >= 135 && angle <= 180) || (angle >= -180 && angle < -135)) {
            result = 3;//手指右滑
        } else if (angle >= -45 && angle <= 45) {
            result = 4;//手指左滑
        }else if (angle >= -135 && angle <= -45) {
            result = 1;//手指上滑
        } else if (angle > 45 && angle < 135) {
            result = 2;//手指下滑
        } 

        return result;
    }
    return {
        getDirection: getDirection
    };
}
angular.module('app').factory('initImg', initImg);

/* ngInject */
function initImg($rootScope, $window, $timeout, $http) {

    function init(pit_name) {

        $http.get('http://192.168.0.195:3000/pit_detail', { params: { 'pitname': pit_name } })
            .success(function(data, status, headers, config) {
                var pit = {};
                pit = data;
                pit.a = pit.painting_detail.split('a');
                pit.dragpit = [{}, {}];
                for (var i = 0; i < pit.dragItem.length; i++) {
                    var obj = {};
                    obj.url = pit.dragimg.split('@')[i];
                    obj.name = pit.dragItem[i];
                    obj.top = parseInt(pit.dragpoint.split(')')[i].split(',')[0]);
                    obj.left = parseInt(pit.dragpoint.split(')')[i].split(',')[1]);
                    obj.width = parseInt(pit.dragpoint.split(')')[i].split(',')[2]);
                    obj.height = parseInt(pit.dragpoint.split(')')[i].split(',')[3]);
                    pit.dragpit[i] = obj;
                }
                return pit;
            })
            .error(function(data, status, headers, config) {return '获取失败！'});
            
    }

    return {
        init: init
    };
}
angular.module('app').factory('initService', initService);

/* ngInject */
function initService($rootScope, $window, $http) {

    function init() {
        var token=$window.sessionStorage.token;
        if (token==undefined) {
            $rootScope.isAuthenticated = false;
            $rootScope.welcome = '';
            $rootScope.avatar = './imgs/common/myicon.png';
        } else {
            $rootScope.isAuthenticated = true;
            $rootScope.welcome = 'Welcome ';
            $http.post('http://192.168.0.195:3000/myicon', { "token": token })
                .success(function(data, status, headers, config) {
                    $rootScope.avatar=data;
                    $window.sessionStorage.myicon=data;
                }).error(function(data, status, headers, config) {});
        }
    }
    return {
        init: init
    };
}